searchState.loadedDescShard("foundationdb_tuple", 0, "Implementation of the official tuple layer typecodes\nRepresent a sequence of bytes (i.e. &amp;u8)\nContains the error value\nUUID namespace for Domain Name System (DNS).\nUUID namespace for ISO Object Identifiers (OIDs).\nUUID namespace for Uniform Resource Locators (URLs).\nUUID namespace for X.500 Distinguished Names (DNs).\nContains the success value\nA packing/unpacking error\nAlias for <code>Result&lt;..., tuple::Error&gt;</code>\nRepresents a well-defined region of keyspace in a …\nTracks the depth of a Tuple decoding chain\nA type that can be packed\nA type that can be unpacked\nA Universally Unique Identifier (UUID).\n<code>all</code> returns the Subspace corresponding to all keys in a …\nGet a borrowed <code>Braced</code> formatter.\nReturns a slice of 16 octets containing the value.\nReturns the four field values of the UUID.\nGet a borrowed <code>Hyphenated</code> formatter.\nGet a borrowed <code>Simple</code> formatter.\nReturns a 128bit value containing the value.\nReturns two 64bit values containing the value.\nGet a borrowed <code>Urn</code> formatter.\nGet a <code>Braced</code> formatter.\n<code>bytes</code> returns the literal bytes of the prefix of this …\nReturns the current depth in any recursive tuple …\nA buffer that can be used for <code>encode_...</code> calls, that is …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts a <code>NonNilUuid</code> back into a <code>Uuid</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a new Subspace from the provided bytes.\nCreates a UUID using the supplied bytes.\nCreates a UUID using the supplied bytes in little endian …\nCreates a reference to a UUID from a reference to the …\nCreates a UUID from four field values.\nCreates a UUID from four field values in little-endian …\nCreates a UUID using the supplied bytes.\nCreates a UUID using the supplied bytes in little endian …\nCreates a UUID from a 128bit value.\nCreates a UUID from a 128bit value in little-endian order.\nCreates a UUID from two 64bit values.\nIf the UUID is the correct version (v1, or v6) this will …\nIf the UUID is the correct version (v1, v6, or v7) this …\nReturns the variant of the UUID structure.\nReturns the version of the UUID.\nReturns the version number of the UUID.\nGet a <code>Hyphenated</code> formatter.\nIncrement the depth by one, this be called when calling …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert into prefix key bytes\nConsumes self and returns the underlying byte value of the …\nTests if the UUID is max (all ones).\nTests if the UUID is nil (all zeros).\n<code>is_start_of</code> returns true if the provided key starts with …\nThe ‘max UUID’ (all ones).\nThe ‘nil UUID’ (all zeros).\nPack value and returns the packed buffer\nReturns the key encoding the specified Tuple with the …\nPack value into the given buffer\nPack value into the given buffer\nPack value into the given buffer\nPack value into the given buffer\nPack value into the given buffer\nPack value into the given buffer\nPack value and returns the packed buffer\nPack value and returns the packed buffer\nPack value and returns the packed buffer\nPack value and returns the packed buffer\nPack value and returns the packed buffer\nReturns the key encoding the specified Tuple with the …\nParses a <code>Uuid</code> from a string of hexadecimal digits with …\n<code>range</code> returns first and last key of given Subspace\nGet a <code>Simple</code> formatter.\nReturns a new Subspace whose prefix extends this Subspace …\nReturns the bytes of the UUID in little-endian order.\nReturns the four field values of the UUID in little-endian …\nReturns a 128bit little-endian value containing the value.\nParses a <code>Uuid</code> from a string of hexadecimal digits with …\nParses a <code>Uuid</code> from a string of hexadecimal digits with …\nUnpack input\n<code>unpack</code> returns the Tuple encoded by the given key with the …\nGet a <code>Urn</code> formatter.")