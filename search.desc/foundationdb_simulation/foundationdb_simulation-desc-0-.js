searchState.loadedDescShard("foundationdb_simulation", 0, "FoundationDB-workload module\nRedirect FoundationDB call to symbol “workloadFactory” …\ndebug\nA vector of key value string pairs to pass to …\nerror, this severity automatically breaks execution\ninfo\nA single metric entry\nA wrapper around a FoundationDB promise\nRustWorkload trait provides a one to one equivalent to the …\nIndicates the severity of a FoundationDB log entry\nRust representation of a simulated FoundationDB database\nwarn\nwarn always\nRust representation of a FoundationDB workload\nA wrapper around a FoundationDB promise\nIndicates if the value represents an average or not\nCreate a metric average entry\nThis method is called when the tester completes. A …\nGet the client id of the workload\nGet the client id of the workload\nReturn the name or description of the workload. Primarily …\nMacro that can be used to create <code>Details</code> more easily.\nSpawn an async block and resolve all contained …\nC++ string formatter of the metric\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSet the check timeout for this workload.\nIf a workload collects metrics (like latencies or …\nGet the value of a parameter from the simulation config …\nGet the process id of the workload\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe name of the metric\nGet the current time\nGet a determinist 32-bit random number\nResolve a FoundationDB promise by setting its value to a …\nSet the process id of the workload\nThis method is called by the tester during the setup phase.\nGet a determinist 64-bit random number\nThis method should run the actual test.\nAdd a log entry in the FoundationDB logs\nCreate a metric value entry\nThe value of the metric")