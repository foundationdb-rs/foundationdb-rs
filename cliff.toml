# git-cliff ~ configuration file
# https://git-cliff.org/docs/configuration

[changelog]
# template for the changelog header
header = """
# Changelog\n
All notable changes to this project will be documented in this file.

The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n
"""
# template for the changelog body
# https://keats.github.io/tera/docs/#introduction
body = """
{% if version -%}
    ## [{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }}
{% else -%}
    ## [Unreleased]
{% endif -%}
{% for group, commits in commits | unique(attribute="message") | filter(attribute="merge_commit", value=false) | group_by(attribute="group") %}
    ### {{ group | upper_first }}
    {% for commit in commits %}
        - {{ commit.message | split(pat="\n") | first | upper_first | trim }}\
    {% endfor %}
{% endfor %}\n
"""

# template for the changelog footer
footer = """
{% for release in releases -%}
    {% if release.version -%}
        {% if release.previous.version -%}
            [{{ release.version | trim_start_matches(pat="v") }}]: \
                https://github.com/foundationdb-rs}/foundationdb-rs\
                    /compare/{{ release.previous.version }}..{{ release.version }}
        {% endif -%}
    {% else -%}
        [unreleased]: https://github.com/foundationdb-rs}/foundationdb-rs\
            /compare/{{ release.previous.version }}..HEAD
    {% endif -%}
{% endfor %}
"""
# remove the leading and trailing whitespace from the templates
trim = true

[git]

# parse the commits based on https://www.conventionalcommits.org
conventional_commits = true

# filter out the commits that are not conventional
filter_unconventional = false

# process each line of a commit as an individual commit
split_commits = false

# regex for preprocessing the commit messages
commit_preprocessors = [
    { pattern = '\n\w+(?:\-\w+)*:\s+[^\n]+', replace = "\n" },
    { pattern = '\n+', replace = "\n  " },
    { pattern = '\s+$', replace = "" }
]

commit_parsers = [
    # Skip patterns (evaluated first)
    { message = "^chore: release", skip = true },
    { message = "^chore\\(release\\)", skip = true },
    { message = "^Merge pull request", skip = true },
    { message = "^Merge branch", skip = true },
    { message = "^[fF]ixup!", skip = true },
    { message = "^[bB]uild\\(deps\\)", skip = true },
    { message = "^[bB]ump", skip = true },
    { message = "^[uU]pdate.*dependency", skip = true },
    { message = "^[uU]pdate.*dependencies", skip = true },
    { body = ".*skip changelog.*", skip = true },

    # Breaking changes (highest priority)
    { message = ".*!", group = "<!-- 0 -->⚠️ BREAKING CHANGES" },
    { body = ".*BREAKING CHANGE.*", group = "<!-- 0 -->⚠️ BREAKING CHANGES" },

    # Features / Additions
    { message = "^feat", group = "<!-- 1 -->🚀 Features" },
    { message = "^[aA]dd", group = "<!-- 1 -->🚀 Features" },

    # Bug fixes
    { message = "^fix", group = "<!-- 2 -->🐛 Bug Fixes" },
    { message = "^[fF]ix:", group = "<!-- 2 -->🐛 Bug Fixes" },
    { message = "^[fF]ix\\(", group = "<!-- 2 -->🐛 Bug Fixes" },
    { message = "^[cC]lippy", group = "<!-- 2 -->🐛 Bug Fixes" },

    # Performance improvements
    { message = "^perf", group = "<!-- 3 -->⚡ Performance" },
    { message = "^[oO]ptimize", group = "<!-- 3 -->⚡ Performance" },

    # Refactoring
    { message = "^refactor", group = "<!-- 4 -->🚜 Refactor" },
    { message = "^[rR]efactor", group = "<!-- 4 -->🚜 Refactor" },
    { message = "^[rR]emove", group = "<!-- 4 -->🚜 Refactor" },

    # Documentation
    { message = "^docs", group = "<!-- 5 -->📚 Documentation" },
    { message = "^[dD]oc", group = "<!-- 5 -->📚 Documentation" },

    # Tests
    { message = "^test", group = "<!-- 6 -->🧪 Testing" },
    { message = "^[tT]est", group = "<!-- 6 -->🧪 Testing" },

    # Build system and CI/CD (non-dependency build changes)
    { message = "^build", group = "<!-- 7 -->🔧 Build" },
    { message = "^ci", group = "<!-- 7 -->🔧 Build" },
    { message = "^[cC][iI]", group = "<!-- 7 -->🔧 Build" },

    # Chores and other changes
    { message = "^chore", group = "<!-- 8 -->⚙️ Miscellaneous" },
    { message = "^style", group = "<!-- 8 -->⚙️ Miscellaneous" },

    # Catch-all (should be last)
    { message = ".*", group = "<!-- 9 -->📦 Other Changes" },
]

# protect breaking changes from being skipped due to matching a skipping commit_parser
protect_breaking_commits = true

# filter out the commits that are not matched by commit parsers
filter_commits = false
